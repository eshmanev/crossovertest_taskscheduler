//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trial.Scheduler.Admin.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.ICommandScheduler")]
    public interface ICommandScheduler {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandScheduler/ScheduleExecution", ReplyAction="http://tempuri.org/ICommandScheduler/ScheduleExecutionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trial.Scheduler.Contracts.Dto.SchedulerErrorDto), Action="http://tempuri.org/ICommandScheduler/ScheduleExecutionSchedulerErrorDtoFault", Name="SchedulerErrorDto", Namespace="http://schemas.datacontract.org/2004/07/Trial.Scheduler.Contracts.Dto")]
        void ScheduleExecution(Trial.Scheduler.Contracts.Dto.ScheduleCommandRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandScheduler/ScheduleExecution", ReplyAction="http://tempuri.org/ICommandScheduler/ScheduleExecutionResponse")]
        System.Threading.Tasks.Task ScheduleExecutionAsync(Trial.Scheduler.Contracts.Dto.ScheduleCommandRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandScheduler/ExecuteCommand", ReplyAction="http://tempuri.org/ICommandScheduler/ExecuteCommandResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Trial.Scheduler.Contracts.Dto.SchedulerErrorDto), Action="http://tempuri.org/ICommandScheduler/ExecuteCommandSchedulerErrorDtoFault", Name="SchedulerErrorDto", Namespace="http://schemas.datacontract.org/2004/07/Trial.Scheduler.Contracts.Dto")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Trial.Scheduler.Contracts.Dto.ScheduleCommandRequest))]
        Trial.Scheduler.Contracts.Dto.ExecuteCommandResponse ExecuteCommand(Trial.Scheduler.Contracts.Dto.ExecuteCommandRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandScheduler/ExecuteCommand", ReplyAction="http://tempuri.org/ICommandScheduler/ExecuteCommandResponse")]
        System.Threading.Tasks.Task<Trial.Scheduler.Contracts.Dto.ExecuteCommandResponse> ExecuteCommandAsync(Trial.Scheduler.Contracts.Dto.ExecuteCommandRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandSchedulerChannel : Trial.Scheduler.Admin.Service.ICommandScheduler, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandSchedulerClient : System.ServiceModel.ClientBase<Trial.Scheduler.Admin.Service.ICommandScheduler>, Trial.Scheduler.Admin.Service.ICommandScheduler {
        
        public CommandSchedulerClient() {
        }
        
        public CommandSchedulerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandSchedulerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandSchedulerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandSchedulerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ScheduleExecution(Trial.Scheduler.Contracts.Dto.ScheduleCommandRequest request) {
            base.Channel.ScheduleExecution(request);
        }
        
        public System.Threading.Tasks.Task ScheduleExecutionAsync(Trial.Scheduler.Contracts.Dto.ScheduleCommandRequest request) {
            return base.Channel.ScheduleExecutionAsync(request);
        }
        
        public Trial.Scheduler.Contracts.Dto.ExecuteCommandResponse ExecuteCommand(Trial.Scheduler.Contracts.Dto.ExecuteCommandRequest request) {
            return base.Channel.ExecuteCommand(request);
        }
        
        public System.Threading.Tasks.Task<Trial.Scheduler.Contracts.Dto.ExecuteCommandResponse> ExecuteCommandAsync(Trial.Scheduler.Contracts.Dto.ExecuteCommandRequest request) {
            return base.Channel.ExecuteCommandAsync(request);
        }
    }
}
